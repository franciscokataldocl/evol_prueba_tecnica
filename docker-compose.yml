services:
  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: [ "postgres", "-c", "log_statement=all" ]

  backend:
    build: ./backend  # Construye desde el Dockerfile en ./backend
    container_name: nestjs_api
    restart: always
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3000:3000"

  frontend:
    build: ./frontend
    container_name: react_app
    restart: always
    env_file:
      - ./frontend/.env
    depends_on:
      - backend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules

  migrations:
    build: ./backend  # Ahora usa `build` en vez de `image`
    container_name: migrations
    command: npx sequelize-cli db:migrate --config /app/config/database.config.js
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_DIALECT: postgres
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  seeders:
    build: ./backend  # Igual que `migrations`, usa `build`
    container_name: seeders
    command: npx sequelize-cli db:seed:all --config /app/config/database.config.js
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_DIALECT: postgres
    depends_on:
      - migrations
    restart: "no"

volumes:
  postgres_data:
  node_modules:
